package com.sos.jid.dialog.classes;


import java.io.File;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.StyleRange;
import org.eclipse.swt.custom.StyledText;

import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.printing.PrinterData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;

import sos.scheduler.editor.conf.forms.SchedulerEditorFontDialog;
 
import com.sos.dashboard.globals.DashBoardConstants;
import com.sos.dialog.classes.SOSPrinter;
import com.sos.localization.Messages;
 
/**
 * \class LogArea
 * 
 * \brief LogArea -
 * 
 * \details
 * 
 * \code .... code goes here ... \endcode
 * 
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author Uwe Risse \version 25.08.2011 \see reference
 * 
 * Created on 19.09.2013 13:54:32
 */

public class SOSDashboardLogArea extends StyledText /* Text */{

    private static final String JID_LOG = "jid_log";
    private static final String DEBUG_MARKER = "[debug]";
    private static final String DEBUG2_MARKER = "[debug2]";
    private static final String DEBUG3_MARKER = "[debug3]";
    private static final String DEBUG4_MARKER = "[debug4]";
    private static final String DEBUG5_MARKER = "[debug5]";
    private static final String DEBUG6_MARKER = "[debug6]";
    private static final String DEBUG7_MARKER = "[debug7]";
    private static final String DEBUG8_MARKER = "[debug8]";
    private static final String DEBUG9_MARKER = "[debug9]";

    private static final String WARN_MARKER = "[WARN]";

    private static final String ERROR_MARKER = "[ERROR]";

    @SuppressWarnings("unused")
    private final String conClassName = "LogArea";

    @SuppressWarnings("unused")
    private static Logger logger = Logger.getLogger(SOSDashboardLogArea.class);
    @SuppressWarnings("unused")
    private final String conSVNVersion = "$Id: LogAreas.java 17709 2012-07-30 10:59:42Z ur $";
    private Composite composite;
    boolean flgInit = false;
    int lenghtOfLinebreak = 1;
    private String logContent;
    private boolean filtered;
    private String searchField="";
    private MenuItem itemFilter;
    private Messages messages;
    
    
    public SOSDashboardLogArea(Composite composite_, int arg1, Messages messages_) {
        super(composite_, arg1);

        this.messages = messages_;
        composite = composite_;
        createContextMenue();
 
        final GridData gridData_1 = new GridData(GridData.FILL, GridData.FILL, true, true, 4, 1);
        gridData_1.minimumHeight = 40;
        gridData_1.widthHint = 454;
        gridData_1.heightHint = 139;
        setLayoutData(gridData_1);
        
        SchedulerEditorFontDialog objFontDialog = new SchedulerEditorFontDialog(getFont().getFontData()[0], getForeground().getRGB());
        objFontDialog.setContext(JID_LOG);
        
        objFontDialog.readFontData();
        setFont(objFontDialog.getFontData(), objFontDialog.getForeGround());
    }
    
    public StyledText getControl() {
        return this;
    }
    
    private void colorLine(StringBuffer line, String s,int iColor,Color color,int actPos,int actLength,int ftType) {;
        int pos = line.indexOf(s);
        if (pos > 0) {
            StyleRange styleRange = new StyleRange();
            styleRange.start = actPos;
            if (iColor!=0){
                styleRange.foreground = composite.getShell().getDisplay().getSystemColor(iColor);
            }else {
                styleRange.foreground = color;
            }
            styleRange.length = actLength;
            styleRange.fontStyle = ftType;
            setStyleRange(styleRange);
             
        }
    }
   

    private void addStyles() {
        Color cWarn = new Color(composite.getDisplay(),255,99,71);
        Color cDebug2 = new Color(composite.getDisplay(),64,128,64);
        Color cDebug3 = new Color(composite.getDisplay(),128,128,128);
        Color cDebug4 = new Color(composite.getDisplay(),128,128,255);
        Color cDebug5 = new Color(composite.getDisplay(),128,128,255);
        Color cDebug6 = new Color(composite.getDisplay(),128,128,255);
        Color cDebug7 = new Color(composite.getDisplay(),128,128,255);
        Color cDebug8 = new Color(composite.getDisplay(),128,128,255);
        Color cDebug9 = new Color(composite.getDisplay(),160,160,160);
        

    int actPos=0;
        for (int i=0;i<this.getLineCount()-1;i++) {
            StringBuffer line = new StringBuffer(this.getLine(i));
            int actLength = line.length();
            colorLine(line,ERROR_MARKER,SWT.COLOR_RED,null,actPos,actLength,SWT.BOLD);
            colorLine(line,WARN_MARKER,0,cWarn,actPos,actLength,SWT.BOLD);
            colorLine(line,DEBUG_MARKER,SWT.COLOR_DARK_GREEN,null,actPos,actLength,SWT.NORMAL);
            colorLine(line,DEBUG2_MARKER,0,cDebug2,actPos,actLength,SWT.NORMAL);
            colorLine(line,DEBUG3_MARKER,0,cDebug3,actPos,actLength,SWT.NORMAL);
            colorLine(line,DEBUG4_MARKER,0,cDebug4,actPos,actLength,SWT.NORMAL);
            colorLine(line,DEBUG5_MARKER,0,cDebug5,actPos,actLength,SWT.NORMAL);
            colorLine(line,DEBUG6_MARKER,0,cDebug6,actPos,actLength,SWT.NORMAL);
            colorLine(line,DEBUG7_MARKER,0,cDebug7,actPos,actLength,SWT.NORMAL);
            colorLine(line,DEBUG8_MARKER,0,cDebug8,actPos,actLength,SWT.NORMAL);
            colorLine(line,DEBUG9_MARKER,0,cDebug9,actPos,actLength,SWT.NORMAL);
         
            actPos = actPos + actLength+lenghtOfLinebreak;
                   
        }
         
    }
    
    private void searchInLogWithRegularExpression() {
        if (searchField != null && !searchField.trim().equals("")) {
            boolean first=true;
              this.unmark();
              Pattern p = Pattern.compile(searchField); 
              Matcher m = p.matcher(this.getText() );
              while ( m.find() ) {
                   this.mark(m.start(),m.end());
                   if (first) {
                       this.setSelection(m.start(),m.start());
                       first = false;
                   }
              }
        }
    }
    
   
    
   public void setText(String logContent) {
       
       this.logContent = logContent;
       super.setText(logContent);
       StringBuffer line = new StringBuffer();
       for (int i=0;i<this.getLineCount();i++) {
            String s= this.getLine(i);
            if (filtered && !searchField.trim().equals("")) {
                Pattern p = Pattern.compile(searchField); 
                Matcher m = p.matcher(s );
                if (m.find() ) {
               
                   line.append(s);
                   line.append("\n");
               }
            }else {
                line.append(s);
                line.append("\n");
                
            }
       }
       
       String s = line.toString();
       super.setText(s);
       addStyles();
       searchInLogWithRegularExpression();
   }
   
   
   
   public void unmark() {
      StyleRange styleRanges[]=new StyleRange[0];
      setStyleRanges(styleRanges);
   }
   
   public void mark(int start, int end) {
 
        
       StyleRange styleRange = new StyleRange();
       styleRange.start = start;
       styleRange.foreground = composite.getShell().getDisplay().getSystemColor(SWT.COLOR_WHITE);
       styleRange.background =  composite.getShell().getDisplay().getSystemColor(SWT.COLOR_BLACK);

       styleRange.length = end-start;
       styleRange.fontStyle = SWT.NORMAL;
       setStyleRange(styleRange);
   }
      
    private void createContextMenue() {
        // Menu objContextMenu = new Menu(this);
        Menu objContextMenu = getMenu();
        if (objContextMenu == null) {
            objContextMenu = new Menu(this.getControl());
        }
 
        MenuItem itemCopy = new MenuItem(objContextMenu, SWT.PUSH);
        itemCopy.addListener(SWT.Selection, getCopyListener());
        itemCopy.setText(messages.getLabel(DashBoardConstants.conSOSDashB_Copy));
      
        MenuItem itemSelectAll = new MenuItem(objContextMenu, SWT.PUSH);
        itemSelectAll.addListener(SWT.Selection, getSelectAllListener());
        itemSelectAll.setText(messages.getLabel(DashBoardConstants.conSOSDashB_SelectAll));
 
        MenuItem itemSelectFont = new MenuItem(objContextMenu, SWT.PUSH);
        itemSelectFont.addListener(SWT.Selection, getSelectFontListener());
        itemSelectFont.setText(messages.getLabel(DashBoardConstants.conSOSDashB_SelectFont));
      
        new MenuItem(objContextMenu, SWT.SEPARATOR);
        itemFilter = new MenuItem(objContextMenu, SWT.CHECK);
        itemFilter.addListener(SWT.Selection, getFilterListener());
        itemFilter.setText(messages.getLabel(DashBoardConstants.conSOSDashB_Filter));
                 
        new MenuItem(objContextMenu, SWT.SEPARATOR);
        MenuItem itemSaveAsFile = new MenuItem(objContextMenu, SWT.PUSH);
        itemSaveAsFile.addListener(SWT.Selection, getSaveAsFileListener());
        itemSaveAsFile.setText(messages.getLabel(DashBoardConstants.conSOSDashB_SaveAsFile));


        MenuItem itemPrint = new MenuItem(objContextMenu, SWT.PUSH);
        itemPrint.addListener(SWT.Selection, getPrintListener());
        itemPrint.setText(messages.getLabel(DashBoardConstants.conSOSDashB_Print));

         
        this.setMenu(objContextMenu);
  
   }

    
    private Listener getSelectFontListener() {

        return new Listener() {
            public void handleEvent(Event e) {
                changeFont();
            }
        };
    }


    private Listener getSaveAsFileListener() {

        return new Listener() {
            public void handleEvent(Event e) {
                try {
                    saveFileAs();
                }
                catch (IOException e1) {
                     e1.printStackTrace();
                }
            }
        };
    }
    
    private Listener getPrintListener() {

        return new Listener() {
            public void handleEvent(Event e) {
                try {
                    print();
                }
                catch (Exception e1) {
                     e1.printStackTrace();
                }
            }
        };
    }
    

    private Listener getFilterListener() {

        return new Listener() {
            public void handleEvent(Event e) {
                setFiltered(itemFilter.getSelection());              
            }
        };
    }

    private Listener getCopyListener() {

        return new Listener() {
            public void handleEvent(Event e) {
                _copy();
            }
        };
    }

 

    private Listener getCutListener() {

        return new Listener() {
            public void handleEvent(Event e) {
                _cut();
            }
        };
    }

    private Listener getSelectAllListener() {

        return new Listener() {
            public void handleEvent(Event e) {
                _selectAll();
            }
        };
    }

    private void _copy() {
        this.copy();
    }

   
    private void _cut() {
        this.cut();
    }

    private void _selectAll() {
        this.selectAll();
    }
 
    private void setFont(FontData f, RGB foreGround) {
        setFont(new Font(this.getDisplay(), f));
        setForeground(new Color(this.getDisplay(), foreGround));
    }
    
    

    private void changeFont() {
        SchedulerEditorFontDialog fd = new SchedulerEditorFontDialog(getFont().getFontData()[0], getForeground().getRGB());
        fd.setContext(JID_LOG);
        fd.setParent(getShell());
        fd.show(getDisplay());
        setFont(fd.getFontData(), fd.getForeGround());
    }
    
  
      
    public void saveFileAs() throws IOException {
        FileDialog dlg = new FileDialog(this.getShell());
        String filename = dlg.open();
        if (filename != null) {
          File outputFile = new File(filename);
          FileOutputStream out = new FileOutputStream(outputFile);
          out.write( this.getText().getBytes());
          out.close();        
          }
      }
    
    public void print() {
        SOSPrinter p = new SOSPrinter(this.getShell());
        p.setText(this.getText());
        p.setFont(this.getFont());
        p.setOrientation(PrinterData.LANDSCAPE);
        try {
            p.print();
        }
        catch (IOException e) { 
            e.printStackTrace();
        }
      }
    
 

    private void setFiltered(boolean filtered) {
        this.filtered = filtered;
        setText( this.logContent );
    }
      
    protected void checkSubclass() {
        // Disable the check that prevents subclassing of SWT components
    }
    public void setSearchField(String searchField) {
        this.searchField = searchField;
        this.setText(this.logContent);
        if (!searchField.trim().equals("")) {
            this.searchInLogWithRegularExpression();
        }
    }
}
