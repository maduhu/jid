package com.sos.scheduler.db;

import static org.junit.Assert.*;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.hibernate.Query;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

  





import com.sos.resources.SOSResourceFactory;
import com.sos.resources.SOSTestResource;

import sos.spooler.Spooler;

/**
* \class SchedulerInstancesDBLayerTest 
* 
* \brief SchedulerInstancesDBLayerTest - 
* 
* \details
*
* \section SchedulerInstancesDBLayerTest.java_intro_sec Introduction
*
* \section SchedulerInstancesDBLayerTest.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 03.02.2012
* \see reference
*
* Created on 03.02.2012 10:43:15
 */

public class SchedulerInstancesDBLayerTest {

	private static final String HOSTNAME_DELETE = "xxxTest";
    @SuppressWarnings("unused")
	private final String	conClassName	= "SchedulerInstancesDBLayerTest";
    private SchedulerInstancesDBLayer schedulerInstancesDBLayer;
     private File configurationFile;

	public SchedulerInstancesDBLayerTest() {
		//
	}
	
	   private SchedulerInstancesDBItem getNewSchedulerInstancesDBItem() {
	        SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy HH:mm");

	        SchedulerInstancesDBItem schedulerInstancesDBItem = new SchedulerInstancesDBItem();
            schedulerInstancesDBItem.setSchedulerId("mySchedulerId");
            schedulerInstancesDBItem.setHostname("myHostname");
	        schedulerInstancesDBItem.setIncludePath("myIncludePath");;
            schedulerInstancesDBItem.setIniPath("myIniPath"); 
            schedulerInstancesDBItem.setTcpPort(4711); 
            schedulerInstancesDBItem.setUdpPort(4712); 
            schedulerInstancesDBItem.setSupervisorTcpPort(4713); 
            schedulerInstancesDBItem.setJettyHttpPort(4714); 
            schedulerInstancesDBItem.setJettyHttpsPort(4715); 
            schedulerInstancesDBItem.setDbName("myDbName"); 
            schedulerInstancesDBItem.setDbHistoryTableName("myDbHistoryTableName"); 
            schedulerInstancesDBItem.setDbOrderHistoryTableName("myDbOrderHistoryTableName"); 
            schedulerInstancesDBItem.setDbOrdersTableName("myDbOrdersTableName"); 
            schedulerInstancesDBItem.setDbTasksTableName("myDbTasksTableName"); 
            schedulerInstancesDBItem.setDbVariablesTableName("myDbVariablesTableName"); 
            schedulerInstancesDBItem.setWorkingDirectory("myWorkingDirectory"); 
            schedulerInstancesDBItem.setLiveDirectory("myLiveDirectory"); 
            schedulerInstancesDBItem.setLogDir("myLogDir"); 
            schedulerInstancesDBItem.setIsService(false); 
            schedulerInstancesDBItem.setIsRunning(false); 
            schedulerInstancesDBItem.setIsPaused(false); 
            schedulerInstancesDBItem.setIsCluster(false); 
            schedulerInstancesDBItem.setIsAgent(false); 
            schedulerInstancesDBItem.setIsSosCommandWebservice(true); 
            schedulerInstancesDBItem.setParam("myParam"); 
            schedulerInstancesDBItem.setSupervisorHostName("mySupervisorHostName"); 
	        
	       
 
	        return schedulerInstancesDBItem;
	        
	        
	    }

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
        configurationFile = SOSResourceFactory.asFile(SOSTestResource.HIBERNATE_CONFIGURATION_ORACLE);
        schedulerInstancesDBLayer = new SchedulerInstancesDBLayer(configurationFile);
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testSchedulerInstancesDBLayer() {
	    SchedulerInstancesDBLayer schedulerInstancesDBLayer = new SchedulerInstancesDBLayer(configurationFile);
	    schedulerInstancesDBLayer.beginTransaction();
	    schedulerInstancesDBLayer.commit();	}

	@Test
	public void testDelete() {
	    // Test mit delete eines Bereiches       
	    SchedulerInstancesDBLayer schedulerInstancesDBLayer = new SchedulerInstancesDBLayer(configurationFile);
	    schedulerInstancesDBLayer.getFilter().setHostname(HOSTNAME_DELETE);
        schedulerInstancesDBLayer.beginTransaction();
  
        schedulerInstancesDBLayer.delete();
        schedulerInstancesDBLayer.commit();

        
        List <SchedulerInstancesDBItem>  schedulerInstancesList  = schedulerInstancesDBLayer.getSchedulerInstancesList();
        assertEquals(0, schedulerInstancesList.size());
        
// Test mit delete eines Eintrages      
        SchedulerInstancesDBLayer d = new SchedulerInstancesDBLayer(configurationFile);
        d.beginTransaction();
        
        SchedulerInstancesDBItem schedulerInstancesDBItem = getNewSchedulerInstancesDBItem();
        schedulerInstancesDBItem.setHostName(HOSTNAME_DELETE);


        d.save(schedulerInstancesDBItem);
        d.delete(schedulerInstancesDBItem);
        d.save(schedulerInstancesDBItem);  
        d.delete(schedulerInstancesDBItem);

        d.commit();
          
        d.beginTransaction(); 
        Query query = schedulerInstancesDBLayer.createQuery("  from SchedulerInstancesDBItem where  hostname = :hostname");

        query.setParameter("hostname", HOSTNAME_DELETE);
 
        schedulerInstancesList = query.list();
        assertEquals(0, schedulerInstancesList.size());	}

	@Test
	public void testGetSchedulerInstancesList() {
	    SchedulerInstancesDBLayer schedulerInstancesDBLayer = new SchedulerInstancesDBLayer(configurationFile);
	    schedulerInstancesDBLayer.getFilter().setLimit(1);
        schedulerInstancesDBLayer.beginTransaction();
 
        List  transferList  = schedulerInstancesDBLayer.getSchedulerInstancesList();
        assertEquals("testGetSchedulerInstancesList", 1, transferList.size());
	}

	@Test
	public void testGetInstanceById() {
	    String schedulerId = "myScheduler";
        String hostname = "myHost";
        Integer port = 4711;
        
    
        SchedulerInstancesDBItem schedulerInstancesDbItem = new SchedulerInstancesDBItem();
        schedulerInstancesDbItem.setHostName(hostname);
        schedulerInstancesDbItem.setTcpPort(port);
        schedulerInstancesDbItem.setSchedulerId(schedulerId);
         
        //Test prepare
//        SchedulerInstancesDBLayer schedulerInstancesDBLayer = new SchedulerInstancesDBLayer(new File("R:/nobackup/sos/junit/" + "hibernate_oracle.cfg.xml"));
        schedulerInstancesDBLayer.getFilter().setSchedulerId(schedulerId);
        schedulerInstancesDBLayer.getFilter().setHostname(hostname);
        schedulerInstancesDBLayer.getFilter().setPort(port);
        schedulerInstancesDBLayer.delete();
        
        //Test execute
        schedulerInstancesDBLayer.insertScheduler(schedulerInstancesDbItem);
        schedulerInstancesDBLayer.commit();
        SchedulerInstancesDBItem schedulerInstancesDBItem = schedulerInstancesDBLayer.getInstanceById("myScheduler");
        assertEquals("testGetInstanceById",schedulerInstancesDBItem.getHostName(), hostname);
        schedulerInstancesDBLayer.delete(schedulerInstancesDBItem);

        
	}
 
	@Test
	public void testInsertScheduler() {
 	    
		String schedulerId = "myScheduler";
		String hostname = "myHost";
		Integer port = 4711;
		
	
		SchedulerInstancesDBItem schedulerInstancesDbItem = new SchedulerInstancesDBItem();
	    schedulerInstancesDbItem.setHostName(hostname);
	    schedulerInstancesDbItem.setTcpPort(port);
	    schedulerInstancesDbItem.setSchedulerId(schedulerId);
	    schedulerInstancesDbItem.setDbName("myDbname");
	    schedulerInstancesDbItem.setDbHistoryTableName("myDbHistoryTableName");
	    schedulerInstancesDbItem.setDbOrdersTableName("myDbOrdersTableName");
	    schedulerInstancesDbItem.setDbTasksTableName("myDbTasksTableName");
	    schedulerInstancesDbItem.setDbVariablesTableName("myDbVariablesTableName");
	    schedulerInstancesDbItem.setIncludePath("myIncludePath");
	    schedulerInstancesDbItem.setIniPath("myIniPath");
	    schedulerInstancesDbItem.setLogDir("myLogDir");
	    schedulerInstancesDbItem.setParam("myParam");
	    schedulerInstancesDbItem.setIsService(true);
	    schedulerInstancesDbItem.setLiveDirectory("myLiveDirectory");
        schedulerInstancesDbItem.setSupervisorHostName("mySupervisorHostname");
        schedulerInstancesDbItem.setSupervisorTcpPort(4712);

		
		
		
		//Test prepare
//		SchedulerInstancesDBLayer schedulerInstancesDBLayer = new SchedulerInstancesDBLayer(new File("R:/nobackup/sos/junit/" + "hibernate_oracle.cfg.xml"));
		schedulerInstancesDBLayer.getFilter().setSchedulerId(schedulerId);
		schedulerInstancesDBLayer.getFilter().setHostname(hostname);
		schedulerInstancesDBLayer.getFilter().setPort(port);
 		schedulerInstancesDBLayer.delete();
 		
 		//Test execute
 		schedulerInstancesDBLayer.insertScheduler(schedulerInstancesDbItem);
		schedulerInstancesDBLayer.commit();		

 		
		//Test control result 
		List  schedulerList  = schedulerInstancesDBLayer.getSchedulerInstancesList();
		assertEquals(1, schedulerList.size());      
   
		 
		
	}
}
