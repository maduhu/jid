package com.sos.eventing.db;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.sos.dashboard.globals.DashBoardConstants;
import com.sos.hibernate.classes.DbItem;
import com.sos.hibernate.classes.SOSHibernateIntervalFilter;
import com.sos.hibernate.interfaces.ISOSHibernateFilter;

/**
* \class SchedulerEventFilter 
* 
* \brief SchedulerEventFilter - 
* 
* \details
*
* \section SchedulerEventFilter.java_intro_sec Introduction
*
* \section SchedulerEventFilter.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 14.12.2011
* \see reference
*
* Created on 14.12.2011 13:53:37
 */
public class SchedulerEventFilter extends SOSHibernateIntervalFilter implements ISOSHibernateFilter {
	@SuppressWarnings("unused")
	private final String	conClassName	= "SchedulerEventFilter";
	
	private List<SchedulerEventDBItem> eventList = new ArrayList<SchedulerEventDBItem>();

	private String			remoteSchedulerHost;
	private String          conditon;
	private Long			remoteSchedulerPort;
	private String			jobChain;
	private String			orderId;
	private String			jobName;
	private String			eventClass;
	private String          eventId;
	private String 			exitCode;
	private Date            expires;
	private String 			expiresIso;
	private String			schedulerId		= "";

	public SchedulerEventFilter() {
		super(DashBoardConstants.conPropertiesFileName);
	}

	 

	public boolean isFiltered(DbItem dbitem) {
		SchedulerEventDBItem h = (SchedulerEventDBItem) dbitem;
		return false;
 	}

	public List<SchedulerEventDBItem> getEventList() {
		return eventList;
	}
	
	public void setEventList(List<SchedulerEventDBItem> eventList) {
		this.eventList.clear();
		for(SchedulerEventDBItem e : eventList)
			if(!e.getEventName().equals("")) this.eventList.add(e);
	}

	public void addEventId(String eventClass, String eventId) {
	    SchedulerEventDBItem s = new SchedulerEventDBItem();
	    s.setEventId(eventId);
	    s.setEventClass(eventClass);
		this.eventList.add(s);
	}
	
	public boolean hasEvents() {
		return (!eventList.isEmpty());
	}
	

	@Override
	public String getTitle() {
		
	     
		String s = "";
		if (remoteSchedulerHost != null && !remoteSchedulerHost.equals("")) {
			   s += String.format("RemoteScheduler: %s:%s ",remoteSchedulerHost,remoteSchedulerPort);
		}
		
		
		if (schedulerId != null && !schedulerId.equals("")) {
			   s += String.format("Scheduler Id: %s ",schedulerId);
		}
		
		if (jobChain != null && !jobChain.equals("")) {
			   s += String.format("JobChain: %s ",jobChain);
		}

		if (jobName!= null && !jobName.equals("")) {
			   s += String.format("JobName: %s ",jobName);
		}
		  
		if (eventClass != null && !eventClass.equals("")) {
			   s += String.format("Class: %s ",eventClass);
		}
		  
		if (eventId != null && !eventId.equals("")) {
			   s += String.format("Id: %s ",eventId);
		}
	
		if (exitCode != null && !exitCode.equals("")) {
			   s += String.format("Exit: %s ",exitCode);
		}
		  
		String title = String.format("%1s", s);
		return title;
		 
	}

	@Override
	public void setIntervalFromDate(Date d) {
       this.expires = d;		
	}

	@Override
	public void setIntervalToDate(Date d) {
	       this.expires = d;		
	}



	@Override
	public void setIntervalFromDateIso(String s) {
		this.expiresIso = s;
 	}

	@Override
	public void setIntervalToDateIso(String s) {
		this.expiresIso = s;
	}



	public String getRemoteSchedulerHost() {
		return remoteSchedulerHost;
	}



	public void setRemoteSchedulerHost(String remoteSchedulerHost) {
		this.remoteSchedulerHost = remoteSchedulerHost;
	}



	public Long getRemoteSchedulerPort() {
		return remoteSchedulerPort;
	}



	public void setRemoteSchedulerPort(Long remoteSchedulerPort) {
		this.remoteSchedulerPort = remoteSchedulerPort;
	}

	public void setRemoteSchedulerPort(String remoteSchedulerPort) {
       try {
           this.remoteSchedulerPort = Long.parseLong(remoteSchedulerPort);
       }catch (NumberFormatException e) {
           this.remoteSchedulerPort = null;
       }
    }


	public String getJobChain() {
		return jobChain;
	}

	public void setJobChain(String jobChain) {
		this.jobChain = jobChain;
	}



	public String getOrderId() {
		return orderId;
	}



	public void setOrderId(String orderId) {
		this.orderId = orderId;
	}



	public String getJobName() {
		return jobName;
	}



	public void setJobName(String jobName) {
		this.jobName = jobName;
	}



	public String getEventClass() {
		return eventClass;
	}



	public void setEventClass(String eventClass) {
		this.eventClass = eventClass;
	}



	public String getEventId() {
		return eventId;
	}



	public void setEventId(String eventId) {
		this.eventId = eventId;
	}



	public String getExitCode() {
		return exitCode;
	}



	public void setExitCode(String exitCode) {
		this.exitCode = exitCode;
	}



	public Date getExpires() {
		return expires;
	}



	public void setExpires(Date expires) {
		this.expires = expires;
	}



	public String getSchedulerId() {
		return schedulerId;
	}



	public void setSchedulerId(String schedulerId) {
		this.schedulerId = schedulerId;
	}



    public String getConditon() {
        return conditon;
    }



    public void setConditon(String conditon) {
        this.conditon = conditon;
    }
 
	 
}
