package com.sos.eventing.db;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.hibernate.Query;
import org.joda.time.DateTime;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sos.resources.SOSResourceFactory;
import com.sos.resources.SOSTestResource;


 

/**
* \class SchedulerEventDBLayerTest 
* 
* \brief SchedulerEventDBLayerTest - 
* 
* \details
*
* \section SchedulerEventDBLayerTest.java_intro_sec Introduction
*
* \section SchedulerEventDBLayerTest.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 13.10.2011
* \see reference
*
* Created on 13.10.2011 10:34:41
 */

public class SchedulerEventDBLayerTest {

	private static final String MY_SCHEDULER_ID = "mySchedulerId";
	private static final String MY_CLASS = "myClass";
	private static final String MY_EVENT_ID = "myEventId";
	@SuppressWarnings("unused")
	private final String	conClassName	= "SchedulerEventDBLayerTest";
    private SchedulerEventDBLayer schedulerEventDBLayer;
     private File configurationFile;

	
	
	private SchedulerEventDBItem getNewSchedulerEventDBItem() {
		SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy hh:mm");

		SchedulerEventDBItem schedulerEventDBItem = new SchedulerEventDBItem();
		schedulerEventDBItem.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
		schedulerEventDBItem.setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
		schedulerEventDBItem.setJobName("myJob");
		schedulerEventDBItem.setJobChain("myJobchain");
		schedulerEventDBItem.setOrderId("myOrderId");
	 
		schedulerEventDBItem.setSchedulerId(SchedulerEventDBLayerTest.MY_SCHEDULER_ID);
		
		try {
			Date expiresD = formatter.parse("26.09.2029 10:00");
		    DateTime expires = new DateTime(expiresD);
	    	schedulerEventDBItem.setExpires(expires);
 		}
		catch (ParseException e) {
			e.printStackTrace();
		}

	    schedulerEventDBItem.setCreated(new DateTime());
		return schedulerEventDBItem;
		
		
	}
	public SchedulerEventDBLayerTest() {
		//
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
        configurationFile = SOSResourceFactory.asFile(SOSTestResource.HIBERNATE_CONFIGURATION_ORACLE);;
		schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testSchedulerEventDBLayer() {
		SchedulerEventDBLayer schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);
		schedulerEventDBLayer.beginTransaction();
		schedulerEventDBLayer.commit();
		
	}

	@Test
	public void testDelete() throws ParseException {
		
// Test mit delete eines Bereiches		
		SchedulerEventDBLayer schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);
		schedulerEventDBLayer.getFilter().setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
		schedulerEventDBLayer.getFilter().setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
		
		schedulerEventDBLayer.beginTransaction();
		schedulerEventDBLayer.delete();
		schedulerEventDBLayer.commit();
	
		List  eventsList  = schedulerEventDBLayer.getScheduleEventList(0);
		assertEquals(0, eventsList.size());
		
// Test mit delete eines Eintrages		
		SchedulerEventDBLayer d = new SchedulerEventDBLayer(configurationFile);
		d.beginTransaction();
		
		SchedulerEventDBItem schedulerEventDBItem = getNewSchedulerEventDBItem();
		
 
		schedulerEventDBItem.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
		d.save(schedulerEventDBItem);
		Long a = schedulerEventDBItem.getId() ;
 
		d.delete(schedulerEventDBItem);
		d.save(schedulerEventDBItem);  
        a = schedulerEventDBItem.getId() ;
		d.delete(schedulerEventDBItem);
 
		d.commit();
		 
		d.beginTransaction(); 
    	Query query = schedulerEventDBLayer.createQuery("  from SchedulerEventDBItem where  eventClass=:eventClass and eventId = :eventId");

 	    query.setParameter("eventId", SchedulerEventDBLayerTest.MY_EVENT_ID);
 	    query.setParameter("eventClass", SchedulerEventDBLayerTest.MY_CLASS);
 
		eventsList = query.list();
		assertEquals(0, eventsList.size());
	}

  
    @Test
	public void testSetWhereSchedulerId() {
    	String mySchedulerid = SchedulerEventDBLayerTest.MY_SCHEDULER_ID;
		SchedulerEventDBLayer d = new SchedulerEventDBLayer(configurationFile);
		schedulerEventDBLayer.getFilter().setSchedulerId(mySchedulerid);
		
		d.beginTransaction();
		schedulerEventDBLayer.getFilter().setSchedulerId(mySchedulerid);
        schedulerEventDBLayer.delete();
		d.commit();
		
		d.beginTransaction();
		
		SchedulerEventDBItem schedulerEventDBItem = getNewSchedulerEventDBItem();
		schedulerEventDBItem.setSchedulerId(mySchedulerid);
		d.save(schedulerEventDBItem);
		d.commit();
		
		List  transferList  = schedulerEventDBLayer.getScheduleEventList(0);
		assertEquals(1, transferList.size());      
   
		d.beginTransaction();
		schedulerEventDBLayer.getFilter().setSchedulerId(mySchedulerid);
        schedulerEventDBLayer.delete();
		d.commit();
		
		transferList  = schedulerEventDBLayer.getScheduleEventList(0);
        assertEquals("testSetwhereSchedulerId failed: ",0, transferList.size());
	}
 
	@Test
	public void testGetSchedulerEventList() throws ParseException {
		
	    schedulerEventDBLayer.beginTransaction();
        SchedulerEventDBItem schedulerEventDBItem = getNewSchedulerEventDBItem();
                
        schedulerEventDBItem.setSchedulerId("new");
        schedulerEventDBLayer.save(schedulerEventDBItem);
        schedulerEventDBLayer.commit();
 	    SchedulerEventDBLayer schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);
		schedulerEventDBLayer.beginTransaction();
		List<SchedulerEventDBItem> eventList  = schedulerEventDBLayer.getScheduleEventList(1);
		assertEquals("testGetSchedulerEventList", 1, eventList.size());
	}
 	 
	 
	@Test
	public void testUpdateSchedulerEventDBItem() {
		SchedulerEventDBLayer schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);

		schedulerEventDBLayer.beginTransaction();
		SchedulerEventDBItem schedulerEventDBItem = getNewSchedulerEventDBItem();
				
    	schedulerEventDBItem.setSchedulerId("Old");
		schedulerEventDBLayer.save(schedulerEventDBItem);
		long a = schedulerEventDBItem.getId();
		schedulerEventDBLayer.commit();
		
		schedulerEventDBLayer.beginTransaction();
		SchedulerEventDBItem schedulerEventDBItem2 =    schedulerEventDBLayer.getEvent(a  );
		schedulerEventDBItem2.setSchedulerId("New");
		schedulerEventDBLayer.update(schedulerEventDBItem2);
		schedulerEventDBLayer.commit();
		
		  
	}
	
	@Test
	public void testCheckEventExistsDBItem() {
		SchedulerEventDBLayer schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);
		schedulerEventDBLayer.getFilter().setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
		schedulerEventDBLayer.getFilter().setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);

		schedulerEventDBLayer.beginTransaction();
		SchedulerEventDBItem schedulerEventDBItem = getNewSchedulerEventDBItem();	
		schedulerEventDBItem.setSchedulerId(SchedulerEventDBLayerTest.MY_SCHEDULER_ID);
		schedulerEventDBItem.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
		schedulerEventDBItem.setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
		schedulerEventDBLayer.save(schedulerEventDBItem);
		schedulerEventDBLayer.commit();
		
		schedulerEventDBLayer.checkEventExists();
		assertEquals("testCheckEventExistsDBItem", true, schedulerEventDBLayer.checkEventExists());
		
		schedulerEventDBLayer.beginTransaction();
		schedulerEventDBLayer.delete();
		schedulerEventDBLayer.commit();
		
		schedulerEventDBLayer.checkEventExists();
		assertEquals("testCheckEventExistsDBItem", false, schedulerEventDBLayer.checkEventExists());
	 
		
		  
	}
	
	@Test
	public void checkEventExistsCheckEventExistsEvent() {
	    SchedulerEventDBLayer schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);
        schedulerEventDBLayer.getFilter().setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
        schedulerEventDBLayer.getFilter().setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);

        schedulerEventDBLayer.beginTransaction();
        SchedulerEventDBItem schedulerEventDBItem = getNewSchedulerEventDBItem();   
        schedulerEventDBItem.setSchedulerId(SchedulerEventDBLayerTest.MY_SCHEDULER_ID);
        schedulerEventDBItem.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
        schedulerEventDBItem.setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
        schedulerEventDBLayer.save(schedulerEventDBItem);
        schedulerEventDBLayer.commit();

        SchedulerEventDBItem event1 = new SchedulerEventDBItem();
        event1.setEventClass("***");
        
        SchedulerEventDBItem event2 = new SchedulerEventDBItem();
        event2.setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
        event2.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);

        
        assertEquals("testCheckEventExistsDBItem", false, schedulerEventDBLayer.checkEventExists(event1));    
        assertEquals("testCheckEventExistsDBItem", true, schedulerEventDBLayer.checkEventExists(event2));    
        
        schedulerEventDBLayer.beginTransaction();
        schedulerEventDBLayer.delete();
        schedulerEventDBLayer.commit();
        
        schedulerEventDBLayer.checkEventExists(event2);
        assertEquals("testCheckEventExistsDBItem", false, schedulerEventDBLayer.checkEventExists(event2));    
	}
	
	
	   @Test
	    public void checkEventExistsCheckEventExistsFilter() {
	        SchedulerEventDBLayer schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);
	        schedulerEventDBLayer.getFilter().setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
	        schedulerEventDBLayer.getFilter().setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);

	        schedulerEventDBLayer.beginTransaction();
	        SchedulerEventDBItem schedulerEventDBItem = getNewSchedulerEventDBItem();   
	        schedulerEventDBItem.setSchedulerId(SchedulerEventDBLayerTest.MY_SCHEDULER_ID);
	        schedulerEventDBItem.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
	        schedulerEventDBItem.setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
	        schedulerEventDBLayer.save(schedulerEventDBItem);
	        schedulerEventDBLayer.commit();

	        SchedulerEventFilter schedulerEventFilter = new SchedulerEventFilter();
	        schedulerEventFilter.setEventClass("***");
            assertEquals("testCheckEventExistsDBItem", false, schedulerEventDBLayer.checkEventExists(schedulerEventFilter));    

	        
            schedulerEventFilter.setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
            schedulerEventFilter.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
            assertEquals("testCheckEventExistsDBItem", true, schedulerEventDBLayer.checkEventExists(schedulerEventFilter));    
	        
	        
	        schedulerEventDBLayer.beginTransaction();
	        schedulerEventDBLayer.delete();
	        schedulerEventDBLayer.commit();
	        
	 
	        assertEquals("testCheckEventExistsDBItem", false, schedulerEventDBLayer.checkEventExists(schedulerEventFilter));    
	    }
	   
	   @Test
       public void checkEventExistsCheckEventExistsId() {
           SchedulerEventDBLayer schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);
           
           schedulerEventDBLayer.getFilter().setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
           schedulerEventDBLayer.getFilter().setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);

           schedulerEventDBLayer.beginTransaction();
           SchedulerEventDBItem schedulerEventDBItem = getNewSchedulerEventDBItem();   
           schedulerEventDBItem.setSchedulerId(SchedulerEventDBLayerTest.MY_SCHEDULER_ID);
           schedulerEventDBItem.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
           schedulerEventDBItem.setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
           schedulerEventDBLayer.save(schedulerEventDBItem);
           schedulerEventDBLayer.commit();

    
           
           
           SchedulerEventFilter schedulerEventFilter = new SchedulerEventFilter();
           schedulerEventFilter.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
           assertEquals("testCheckEventExistsDBItem", true, schedulerEventDBLayer.checkEventExists(schedulerEventFilter));    
           
            
       }
	   
	   @Test
       public void checkEventExistsCheckEventExistsCondition() {
           SchedulerEventDBLayer schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);
           schedulerEventDBLayer.getFilter().setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
           schedulerEventDBLayer.getFilter().setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);

           schedulerEventDBLayer.beginTransaction();
           SchedulerEventDBItem schedulerEventDBItem = getNewSchedulerEventDBItem();   
           schedulerEventDBItem.setSchedulerId(SchedulerEventDBLayerTest.MY_SCHEDULER_ID);
           schedulerEventDBItem.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
           schedulerEventDBItem.setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
           schedulerEventDBLayer.save(schedulerEventDBItem);
           schedulerEventDBLayer.commit();



           assertEquals("testCheckEventExistsDBItem", true, schedulerEventDBLayer.checkEventExists("myClass.myEventId or a.b"));    
           assertEquals("testCheckEventExistsDBItem", true, schedulerEventDBLayer.checkEventExists("( myClass.myEventId or a.b ) and not (a.b and c.d)"));    
           assertEquals("testCheckEventExistsDBItem", false, schedulerEventDBLayer.checkEventExists("myClass.myEventId and a.b"));    
           
           
           schedulerEventDBLayer.beginTransaction();
           schedulerEventDBLayer.delete();
           schedulerEventDBLayer.commit();
           
    
           assertEquals("testCheckEventExistsDBItem", false, schedulerEventDBLayer.checkEventExists("myClass.myEventId or a.b"));    
       }	   
	   
	   
       @Test
       public void checkEventExistsCheckEventExistsConditionClass() {
           SchedulerEventDBLayer schedulerEventDBLayer = new SchedulerEventDBLayer(configurationFile);
           schedulerEventDBLayer.getFilter().setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
           schedulerEventDBLayer.getFilter().setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);

           schedulerEventDBLayer.beginTransaction();
           SchedulerEventDBItem schedulerEventDBItem = getNewSchedulerEventDBItem();   
           schedulerEventDBItem.setSchedulerId(SchedulerEventDBLayerTest.MY_SCHEDULER_ID);
           schedulerEventDBItem.setEventId(SchedulerEventDBLayerTest.MY_EVENT_ID);
           schedulerEventDBItem.setEventClass(SchedulerEventDBLayerTest.MY_CLASS);
           schedulerEventDBLayer.save(schedulerEventDBItem);
           schedulerEventDBLayer.commit();



           assertEquals("testCheckEventExistsDBItem", true, schedulerEventDBLayer.checkEventExists("myEventId or b",SchedulerEventDBLayerTest.MY_CLASS));    
           assertEquals("testCheckEventExistsDBItem", true, schedulerEventDBLayer.checkEventExists("( myEventId or b ) and not (b and d)",SchedulerEventDBLayerTest.MY_CLASS));    
           assertEquals("testCheckEventExistsDBItem", false, schedulerEventDBLayer.checkEventExists("myEventId and b",SchedulerEventDBLayerTest.MY_CLASS));    
           
           
           schedulerEventDBLayer.beginTransaction();
           schedulerEventDBLayer.delete();
           schedulerEventDBLayer.commit();
           
    
           assertEquals("testCheckEventExistsDBItem", false, schedulerEventDBLayer.checkEventExists("myClass.myEventId or a.b"));    
       }
       
   
	   
/*	    
	    public List<SchedulerEventDBItem>  getEventsFromDb() {
	    pblic SchedulerEventsCollection getMissingEvents(List <SchedulerEventDBItem> eventList) {
	    public void createEvent(SchedulerEventDBItem event) {
	    public void deleteEventsForClass(String eventClass) {
*/	        
	
}
