package com.sos.scheduler.history.db;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.File;
import java.text.ParseException;
import java.util.Date;
import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

import com.sos.resources.SOSResourceFactory;
import com.sos.resources.SOSTestResource;

/**
* \class SchedulerHistoryDBLayerTest 
* 
* \brief SchedulerHistoryDBLayerTest - 
* 
* \details
*
* \section SchedulerHistoryDBLayerTest.java_intro_sec Introduction
*
* \section SchedulerHistoryDBLayerTest.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 14.10.2011
* \see reference
*
* Created on 14.10.2011 14:22:06
 */

public class SchedulerOrderHistoryDBLayerTest {

	@SuppressWarnings("unused")
	private final String	conClassName	= "SchedulerHistoryDBLayerTest";
    private SchedulerOrderHistoryDBLayer schedulerOrderHistoryDBLayer;
//    private final String configurationFilename="R:/nobackup/junittests/hibernate/hibernate_oracle.cfg.xml";
    private File configurationFile;

    	
	public SchedulerOrderHistoryDBLayerTest() {
 	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
//		 configurationFile = new File(configurationFilename);
		configurationFile = SOSResourceFactory.asFile(SOSTestResource.HIBERNATE_CONFIGURATION_ORACLE);
		schedulerOrderHistoryDBLayer = new SchedulerOrderHistoryDBLayer(configurationFile); 
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testSchedulerOrderHistoryDBLayer() {
		SchedulerOrderHistoryDBLayer d = new SchedulerOrderHistoryDBLayer(configurationFile); 
	}

	@Test
  @Ignore("Test set to Ignore for later examination")
	public void testDeleteString() throws ParseException {
		schedulerOrderHistoryDBLayer.getFilter().setExecutedFrom("2011-01-01 00:00:00");
		schedulerOrderHistoryDBLayer.getFilter().setExecutedTo("2011-10-01 00:00:00");
		schedulerOrderHistoryDBLayer.getFilter().setSchedulerId("scheduler_4139");
		schedulerOrderHistoryDBLayer.deleteInterval(10,100);
		long i = schedulerOrderHistoryDBLayer.deleteInterval(10,100);
		schedulerOrderHistoryDBLayer.commit();
		assertEquals("testDeleteString fails...:",0,i);
	}
 
	@Test
  @Ignore("Test set to Ignore for later examination")
	public void testGetSchedulerOrderHistoryList() throws ParseException {
		schedulerOrderHistoryDBLayer.getFilter().setExecutedFrom("2000-01-01 00:00:00");
		schedulerOrderHistoryDBLayer.getFilter().setExecutedTo(new Date());
		List<SchedulerOrderHistoryDBItem>  historyList = schedulerOrderHistoryDBLayer.getSchedulerOrderHistoryListFromTo(); 
		assertEquals("testGetSchedulerOrderHistoryList fails...:",1,historyList.size());
	}

 
	@Test
  @Ignore("Test set to Ignore for later examination")
	public void testGetOrderHistoryItems() throws Exception {
		schedulerOrderHistoryDBLayer.getFilter().setExecutedFrom("2001-01-01 00:00:00");
		schedulerOrderHistoryDBLayer.getFilter().setExecutedTo(new Date());
  		List<SchedulerOrderHistoryDBItem>  historyList = schedulerOrderHistoryDBLayer.getOrderHistoryItems(); 
		assertEquals("testGetOrderHistoryList fails...:",1,historyList.size());	
		
	}

	@Test
  @Ignore("Test set to Ignore for later examination")
	public void testGetOrderHistoryItem() throws Exception {
		schedulerOrderHistoryDBLayer.getFilter().setExecutedFrom("2001-01-01 00:00:00");
		schedulerOrderHistoryDBLayer.getFilter().setExecutedTo(new Date());
  		List<SchedulerOrderHistoryDBItem>  historyList = schedulerOrderHistoryDBLayer.getOrderHistoryItems(); 
		assertEquals("testGetOrderHistoryList fails...:",1,historyList.size());	
		
		Long id = historyList.get(0).getHistoryId();
		SchedulerOrderHistoryDBItem schedulerOrderHistoryDBItem = schedulerOrderHistoryDBLayer.get(id);
		assertEquals("testGetOrderHistoryItem fails...:",id,schedulerOrderHistoryDBItem.getHistoryId());
	}

	
	@Test
  @Ignore("Test set to Ignore for later examination")
	public void testSaveOrderHistory() {
		schedulerOrderHistoryDBLayer.beginTransaction();
		schedulerOrderHistoryDBLayer.getFilter().setSchedulerId("Hibernate_Spooler");
		schedulerOrderHistoryDBLayer.delete("SchedulerOrderHistoryDBItem") ;
  		schedulerOrderHistoryDBLayer.commit();
  		
		schedulerOrderHistoryDBLayer.beginTransaction();
		 
		SchedulerOrderHistoryDBItem historyTable = new SchedulerOrderHistoryDBItem();
		historyTable.setOrderId("Kabeljau");
		historyTable.setCause("Thunfisch");
		historyTable.setSpoolerId("Hibernate_Spooler");
		historyTable.setJobChain("Hibernate_JobChainName");
		historyTable.setStartTime(new Date());
		historyTable.setEndTime(new Date());
		 
		schedulerOrderHistoryDBLayer.save(historyTable);

		assertNotNull(historyTable.getHistoryId());

		schedulerOrderHistoryDBLayer.commit();
		
		Long id=historyTable.getHistoryId(); 
		schedulerOrderHistoryDBLayer.beginTransaction(); 
		SchedulerOrderHistoryDBItem loadedhistory=schedulerOrderHistoryDBLayer.get(id); 
		assertNotNull(loadedhistory); 
		assertEquals("Thunfisch",loadedhistory.getCause()); 
		schedulerOrderHistoryDBLayer.commit();	
	}


	@Test
  @Ignore("Test set to Ignore for later examination")
	public void testDeleteInterval() throws ParseException {
		schedulerOrderHistoryDBLayer.deleteInterval(30,100);
		long i= schedulerOrderHistoryDBLayer.deleteInterval(3,100);

		schedulerOrderHistoryDBLayer.commit();
		assertEquals("testDeleteInterval fails...:",0,i);
	}
	 
}
