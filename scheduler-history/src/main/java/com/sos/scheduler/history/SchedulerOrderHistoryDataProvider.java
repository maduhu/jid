package com.sos.scheduler.history;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.custom.TableEditor;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;

import com.sos.dialog.components.SOSTableColumn;
import com.sos.hibernate.interfaces.ISOSHibernateDataProvider;
import com.sos.scheduler.history.classes.SchedulerHistoryTableItem;
import com.sos.scheduler.history.db.SchedulerOrderHistoryDBItem;
import com.sos.scheduler.history.db.SchedulerOrderHistoryDBLayer;

/**
* \class SchedulerOrderHistoryDataProvider
*
* \brief SchedulerOrderHistoryDataProvider -
*
* \details
*
* \section SchedulerOrderHistoryDataProvider Introduction
*
* \section SchedulerOrderHistoryDataProvider.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 19.01.2012
* \see reference
*
* Created on 19.01.2012 09:31:01
 */

public class SchedulerOrderHistoryDataProvider implements ISOSHibernateDataProvider {

	@SuppressWarnings("unused")
	private final String						conClassName						= "SchedulerOrderHistoryDataProvider";

	private List<SchedulerOrderHistoryDBItem>	listOfSchedulerOrderHistoryDBItems	= null;
	//    private List<SchedulerOrderHistoryDBItem>   listOfSchedulerOrderHistoryDBSchedulersItems  = null;
	private SchedulerOrderHistoryDBLayer		schedulerOrderHistoryDBLayer		= null;
	private static Logger						logger								= Logger.getLogger(SchedulerOrderHistoryDataProvider.class);
	private ArrayList							ignoreList							= null;
	private String                              timeZone;

	public SchedulerOrderHistoryDataProvider(final File configurationFile) {
		schedulerOrderHistoryDBLayer = new SchedulerOrderHistoryDBLayer(configurationFile);
		ignoreList = new ArrayList();

	}

	@Override
	public SchedulerOrderHistoryFilter getFilter() {
		return schedulerOrderHistoryDBLayer.getFilter();
	}

	@Override
	public void resetFilter() {
		schedulerOrderHistoryDBLayer.resetFilter();
	}

	@Override
	public void getData(int limit) {
	    schedulerOrderHistoryDBLayer.getFilter().setLimit(limit);
		listOfSchedulerOrderHistoryDBItems = schedulerOrderHistoryDBLayer.getSchedulerOrderHistoryListFromTo();
	}

	public void fillSchedulerIds(final CCombo cbSchedulerId) {
		if (listOfSchedulerOrderHistoryDBItems != null) {
			//Es ist schneller, die vorhandenen Sätze zu verwenden.
			//listOfSchedulerOrderHistoryDBSchedulersItems = schedulerOrderHistoryDBLayer.getSchedulerOrderHistoryListSchedulersFromTo();
			Iterator<SchedulerOrderHistoryDBItem> schedulerOrderHistoryEntries = listOfSchedulerOrderHistoryDBItems.iterator();
			while (schedulerOrderHistoryEntries.hasNext()) {
				SchedulerOrderHistoryDBItem h = schedulerOrderHistoryEntries.next();
				if (cbSchedulerId.indexOf(h.getSpoolerId()) < 0) {
					logger.debug("... cbSchedulerId --> : " + h.getSpoolerId());
					cbSchedulerId.add(h.getSpoolerId());
				}
			}
		}
	}

	public String getLogAsString(final Table tableSchedulerOrderHistory) {
		String log = "";
		if (tableSchedulerOrderHistory.getSelectionIndex() >= 0) {
			TableItem t = tableSchedulerOrderHistory.getItem(tableSchedulerOrderHistory.getSelectionIndex());
			SchedulerOrderHistoryDBItem h = (SchedulerOrderHistoryDBItem) t.getData();
			if (h.getHistoryId() != null) {
				log = getLogAsString(h.getHistoryId());
			}
		}
		return log;
	}

	public String getLogAsString(final Long id) {
		String log = "";
		try {
			SchedulerOrderHistoryDBItem schedulerOrderHistoryDBItem = schedulerOrderHistoryDBLayer.get(id);
			if (schedulerOrderHistoryDBItem != null && schedulerOrderHistoryDBItem.getLog() != null) {
				log = schedulerOrderHistoryDBItem.getLogAsString();
			}
		}
		catch (IOException e1) {
			e1.printStackTrace();
		}
		return log;
	}

	public void fillTableShort(final Table table) {
		if (listOfSchedulerOrderHistoryDBItems != null) {

			Iterator schedulerOrderHistoryEntries = listOfSchedulerOrderHistoryDBItems.iterator();
			while (schedulerOrderHistoryEntries.hasNext()) {
				SchedulerOrderHistoryDBItem h = (SchedulerOrderHistoryDBItem) schedulerOrderHistoryEntries.next();
				if (schedulerOrderHistoryDBLayer.getFilter().isFiltered(h)) {
				}
				else {
					final SchedulerHistoryTableItem newItemTableItem = new SchedulerHistoryTableItem(table, SWT.BORDER);
					h.setDateTimeZone4Getters(timeZone);
					newItemTableItem.setDBItem(h);

					logger.debug("...creating tableItem: " + h.getJobChain() + "/" + h.getOrderId() + ":" + table.getItemCount());
					newItemTableItem.setData(h);
					newItemTableItem.setColor();
					newItemTableItem.setColumnsShort();
 				 
				}
			}
		}
	}

	@Override
	public void fillTable(final Table table) {

		if (listOfSchedulerOrderHistoryDBItems != null) {
			Iterator schedulerOrderHistoryEntries = listOfSchedulerOrderHistoryDBItems.iterator();
			while (schedulerOrderHistoryEntries.hasNext()) {
				SchedulerOrderHistoryDBItem h = (SchedulerOrderHistoryDBItem) schedulerOrderHistoryEntries.next();
				if (schedulerOrderHistoryDBLayer.getFilter().isFiltered(h)) {
				}
				else {
     				final SchedulerHistoryTableItem newItemTableItem = new SchedulerHistoryTableItem(table, SWT.BORDER);
	                h.setDateTimeZone4Getters(timeZone);

					newItemTableItem.setDBItem(h);

					logger.debug("...creating tableItem: " + h.getJobChain() + "/" + h.getOrderId() + ":" + table.getItemCount());
					newItemTableItem.setData(h);
					newItemTableItem.setColor();
					newItemTableItem.setColumns();

				/*	Table table2 = new Table(table.getParent(), SWT.NONE);
					  table2.setLinesVisible(true);
					  table2.setBounds(new org.eclipse.swt.graphics.Rectangle(47,67,190,70));

					  SOSTableColumn tableColumn = new SOSTableColumn(table, SWT.NONE, "Spalte1", 30);
					  tableColumn.setWidth(100);
					  tableColumn.setText("Check Column");

					  SOSTableColumn tableColumn1 = new SOSTableColumn(table, SWT.NONE, "Spalte2", 30);
					  tableColumn1.setWidth(100);
					  tableColumn1.setText("Combo Column");
 
					
					TableEditor editor = new TableEditor (table);

                   
                     editor.horizontalAlignment = SWT.CENTER;
                    editor.setEditor(table2, newItemTableItem, 0);            */       
				}
			}
		}
	}

	@Override
	public void commit() {
		schedulerOrderHistoryDBLayer.commit();
	}

    public void setTimeZone(String timeZone) {
        this.timeZone = timeZone;
        this.getFilter().setTimeZone(timeZone);
    }



}
