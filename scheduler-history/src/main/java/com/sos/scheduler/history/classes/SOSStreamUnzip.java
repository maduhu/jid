package com.sos.scheduler.history.classes;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.zip.GZIPInputStream;

/** \class SOSStreamUnzip
 * 
 * \brief SOSStreamUnzip -
 * 
 * \details
 *
 * \section SOSStreamUnzip.java_intro_sec Introduction
 *
 * \section SOSStreamUnzip.java_samples Some Samples
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author Uwe Risse \version 20.12.2011 \see reference
 *
 * Created on 20.12.2011 10:28:32 */

public class SOSStreamUnzip {

    @SuppressWarnings("unused")
    private final String conClassName = "SOSStreamUnzip";
    private byte[] source;
    private int bufferSize = 8192;

    public SOSStreamUnzip(byte[] source_) {
        source = source_;
    }

    public byte[] unzip() throws IOException {
        InputStream is = null;
        OutputStream os = null;

        is = new GZIPInputStream(new ByteArrayInputStream(source));
        os = new ByteArrayOutputStream();

        byte[] buffer = new byte[bufferSize];

        for (int length; (length = is.read(buffer)) >= 0;)
            os.write(buffer, 0, length);

        if (os != null)
            try {
                os.close();
            } catch (IOException e) {
            }
        if (is != null)
            try {
                is.close();
            } catch (IOException e) {
            }
        return ((ByteArrayOutputStream) os).toByteArray();

    }

    public String unzip2String() throws IOException {
        return new String(unzip());
    }

    public void setBufferSize(int bufferSize) {
        this.bufferSize = bufferSize;
    }
}
