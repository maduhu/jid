package com.sos.dailyschedule;

import static org.junit.Assert.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/** \class ExecutionStatusTest
 * 
 * \brief ExecutionStatusTest -
 * 
 * \details
 *
 * \section ExecutionStatusTest.java_intro_sec Introduction
 *
 * \section ExecutionStatusTest.java_samples Some Samples
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author Uwe Risse \version 13.12.2011 \see reference
 *
 * Created on 13.12.2011 14:42:20 */

public class ExecutionStatusTest {

    @SuppressWarnings("unused")
    private final String conClassName = "ExecutionStatusTest";
    private ExecutionState executionState = null;

    public ExecutionStatusTest() {
        ExecutionState executionState = new ExecutionState();
    }

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
    }

    @Before
    public void setUp() throws Exception {
        executionState = new ExecutionState();
    }

    @After
    public void tearDown() throws Exception {
    }

    @Test
    public void testExecutionState() {
        ExecutionState executionState = new ExecutionState();
    }

    @Test
    public void testExecutionLateState() throws ParseException {
        Date now = new Date();
        Calendar calendar = new GregorianCalendar();
        calendar.setTime(now);

        int myTolerance = 1;
        int myToleranceUnit = calendar.MINUTE;
        executionState.setTolerance(myTolerance);
        executionState.setToleranceUnit(myToleranceUnit);

        calendar.add(myToleranceUnit, (1 + myTolerance) * (-1));

        executionState.setSchedulePlanned(calendar.getTime());

        assertEquals("Test fails:", executionState.getExecutionLateState(), "waiting:late");
        executionState.setSchedulePlanned(new Date());
        assertEquals("Test fails:", executionState.getExecutionLateState(), "waiting");

        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        now = formatter.parse("2011-01-01 01:00:00");
        calendar.setTime(now);

        executionState.setSchedulePlanned(now);

        calendar.add(myToleranceUnit, myTolerance + 1);
        executionState.setScheduleExecuted(calendar.getTime());
        assertEquals("Test fails:", executionState.getExecutionLateState(), "executed:late");

        executionState.setScheduleExecuted(now);
        assertEquals("Test fails:", executionState.getExecutionLateState(), "executed");

    }

    @Test
    public void testIsLate() throws ParseException {
        Date now = new Date();
        Calendar calendar = new GregorianCalendar();
        calendar.setTime(now);

        int myTolerance = 1;
        int myToleranceUnit = calendar.MINUTE;
        executionState.setTolerance(myTolerance);
        executionState.setToleranceUnit(myToleranceUnit);

        calendar.add(myToleranceUnit, (1 + myTolerance) * (-1));

        executionState.setSchedulePlanned(calendar.getTime());
        assertTrue("Test failed: ", executionState.isLate());
        executionState.setSchedulePlanned(new Date());
        assertFalse("Test failed: ", executionState.isLate());

        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        now = formatter.parse("2011-01-01 01:00:00");
        calendar.setTime(now);

        executionState.setSchedulePlanned(now);

        calendar.add(myToleranceUnit, myTolerance + 1);
        executionState.setScheduleExecuted(calendar.getTime());
        assertTrue("Test failed: ", executionState.isLate());

        executionState.setScheduleExecuted(now);
        assertFalse("Test failed: ", executionState.isLate());

    }

    @Test
    public void testGetExecutionState() {
        executionState.setSchedulePlanned(new Date());
        assertEquals("Test fails:", executionState.getExecutionState(), "waiting");
        executionState.setScheduleExecuted(new Date());
        assertEquals("Test fails:", executionState.getExecutionState(), "executed");

    }
}
