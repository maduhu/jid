package com.sos.dailyschedule.db;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.hibernate.Query;
import org.joda.time.DateTime;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sos.hibernate.classes.UtcTimeHelper;
import com.sos.resources.SOSResourceFactory;
import com.sos.resources.SOSTestResource;
import com.sos.scheduler.history.db.SchedulerOrderHistoryDBItem;
import com.sos.scheduler.history.db.SchedulerTaskHistoryDBItem;
 

/**
* \class DaysSchedulerDBLayerTest 
* 
* \brief DaysSchedulerDBLayerTest - 
* 
* \details
*
* \section DaysSchedulerDBLayerTest.java_intro_sec Introduction
*
* \section DaysSchedulerDBLayerTest.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 13.10.2011
* \see reference
*
* Created on 13.10.2011 10:34:41
 */

public class DailyScheduleDBLayerTest {

	@SuppressWarnings("unused")
	private final String	conClassName	= "DailySchedulerDBLayerTest";
    private DailyScheduleDBLayer dailySheduleDBLayer;
    private File configurationFile;

	
	
	private DailyScheduleDBItem getNewDailyScheduleDBItem() {
		SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy hh:mm");

		DailyScheduleDBItem calendar2DBItem = new DailyScheduleDBItem();
		calendar2DBItem.setJob("myJob");
		calendar2DBItem.setJobChain("myJobchain");
		calendar2DBItem.setOrderId("myOrderId");
		calendar2DBItem.setResult(1);
		calendar2DBItem.setStatus(2);
		//calendar2DBItem.setScheduleExecuted(new Date());
		calendar2DBItem.setSchedulePlanned(new Date());
		calendar2DBItem.setSchedulerId("mySchedulerId");
		
		try {
			Date periodBegin = formatter.parse("26.09.2011 10:00");
			Date periodEnd = formatter.parse("26.09.2011 14:00");
		 
	    	calendar2DBItem.setPeriodBegin(periodBegin);
	    	calendar2DBItem.setPeriodEnd(periodEnd);
		}
		catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		calendar2DBItem.setStartStart(true);
	    calendar2DBItem.setModified(new Date());		 
	    calendar2DBItem.setCreated(new Date());
		return calendar2DBItem;
		
		
	}
	public DailyScheduleDBLayerTest() {
		//
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
        configurationFile = SOSResourceFactory.asFile(SOSTestResource.HIBERNATE_CONFIGURATION_ORACLE);;
        dailySheduleDBLayer = new DailyScheduleDBLayer(configurationFile);
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testDaysSchedulerDBLayer() {
		DailyScheduleDBLayer dailyScheduleDBLayer = new DailyScheduleDBLayer(configurationFile);
		dailyScheduleDBLayer.beginTransaction();
		dailyScheduleDBLayer.commit();
		
	}

	@Test
	public void testDelete() throws ParseException {
		
// Test mit delete eines Bereiches		
		DailyScheduleDBLayer dailyScheduleDBLayer = new DailyScheduleDBLayer(configurationFile);
		dailyScheduleDBLayer.beginTransaction();
		dailyScheduleDBLayer.setDateFormat("yyyy-MM-dd hh:mm");
		dailyScheduleDBLayer.setWhereFromUtc("2011-01-01 00:00");
		dailyScheduleDBLayer.setWhereToUtc("2011-10-01 00:00");
		dailyScheduleDBLayer.delete();
		dailyScheduleDBLayer.commit();

		
		List  transferList  = dailyScheduleDBLayer.getDailyScheduleList(0);
		assertEquals(0, transferList.size());
		
// Test mit delete eines Eintrages		
		DailyScheduleDBLayer d = new DailyScheduleDBLayer(configurationFile);
		d.beginTransaction();
		
		DailyScheduleDBItem calendar2DBItem = getNewDailyScheduleDBItem();
		calendar2DBItem.setStatus(47);


		d.save(calendar2DBItem);
		d.delete(calendar2DBItem);
		d.save(calendar2DBItem);  
		d.delete(calendar2DBItem);

		d.commit();
		  
		d.beginTransaction(); 
    	Query query = dailyScheduleDBLayer.createQuery("  from DailyScheduleDBItem where  status = :status");

 	    query.setParameter("status", 47);
 
		transferList = query.list();
		assertEquals(0, transferList.size());
	}


	@Test
	public void testSetWhereFromDate() throws ParseException   {
		Date date = new Date();
		dailySheduleDBLayer.setWhereFrom(date);
        String iso = dailySheduleDBLayer.getWhereFromIso();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
	    String d = formatter.format(date);

		formatter = new SimpleDateFormat("yyyy-MM-dd 00:00:00");
	    String df = formatter.format(date);
	 
		formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		date = formatter.parse(df);
        date = UtcTimeHelper.convertTimeZonesToDate(UtcTimeHelper.localTimeZoneString(), "UTC", new DateTime(date));

 		assertEquals("testSetwhereFromDate failed: ",d,iso);	
  	    assertEquals("testSetwhereFromDate failed: ",0,date.compareTo(dailySheduleDBLayer.getWhereUtcFrom()));	
     }

	@Test
	public void testSetWhereToDate() throws ParseException   {
		Date date = new Date();
		dailySheduleDBLayer.setWhereTo(date);
        String iso = dailySheduleDBLayer.getWhereToIso();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
	    String d = formatter.format(date);

	    formatter = new SimpleDateFormat("yyyy-MM-dd 23:59:59");
	    String df = formatter.format(date);
	 
		formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		date = formatter.parse(df);
        date = UtcTimeHelper.convertTimeZonesToDate(UtcTimeHelper.localTimeZoneString(), "UTC", new DateTime(date));

  	    assertEquals("testSetwhereToDate failed: ",d,iso);	
  	    assertEquals("testSetwhereToDate failed: ",0,date.compareTo(dailySheduleDBLayer.getWhereUtcTo()));	
	}

	@Test
	public void testSetWhereFromString() throws ParseException {
		  String myWhereFromDate = "01.01.2011 00:00:00";
		  dailySheduleDBLayer.setDateFormat("dd.MM.yyyy 00:mm:ss");
		  dailySheduleDBLayer.setWhereFrom(myWhereFromDate);
	      Date whereFromDate = dailySheduleDBLayer.getWhereUtcFrom();
	  	  SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy hh:mm:ss");
		  Date d = formatter.parse(myWhereFromDate);
          d = UtcTimeHelper.convertTimeZonesToDate(UtcTimeHelper.localTimeZoneString(), "UTC", new DateTime(d));

		  
		  
		 
	      assertEquals("testSetwhereFromDate failed: ",0,d.compareTo(whereFromDate));	
	}

	@Test
	public void testSetWhereToString() throws ParseException {
		  String myWhereToDate = "01.01.2011 00:00:00";
		  dailySheduleDBLayer.setDateFormat("dd.MM.yyyy HH:mm:ss");

		  dailySheduleDBLayer.setWhereTo(myWhereToDate);
	      Date whereToDate = dailySheduleDBLayer.getWhereUtcTo();
	  	  SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
		  Date d = formatter.parse(myWhereToDate);
		  
		  formatter = new SimpleDateFormat("yyyy-MM-dd 23:59:59");
		  String df = formatter.format(d);
		 
  		  formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		  d = formatter.parse(df);
          d = UtcTimeHelper.convertTimeZonesToDate(UtcTimeHelper.localTimeZoneString(), "UTC", new DateTime(d));

		 
	      assertEquals("testSetwhereFromDate failed: ",0,d.compareTo(whereToDate));
	}

 
    @Test
	public void testSetWhereSchedulerId() {
    	String myid = "mySchedulerId";
		DailyScheduleDBLayer d = new DailyScheduleDBLayer(configurationFile);
		dailySheduleDBLayer.setWhereSchedulerId(myid);
		d.beginTransaction();
		
		DailyScheduleDBItem calendar2DBItem = getNewDailyScheduleDBItem();
		calendar2DBItem.setSchedulerId(myid);
		d.save(calendar2DBItem);
		d.commit();
		
		List  transferList  = dailySheduleDBLayer.getDailyScheduleList(1);
		assertEquals(1, transferList.size());      
   
		dailySheduleDBLayer.setWhereSchedulerId(myid);
        d.beginTransaction();
		dailySheduleDBLayer.delete();
		d.commit();
		
		transferList  = dailySheduleDBLayer.getDailyScheduleList(0);
        assertEquals("testSetwhereSchedulerId failed: ",0, transferList.size());
	}

	@Test
	public void testSetDateFormat() throws ParseException {
		  String myWhereFromDate = "2011-01*01";
		  String newFormat = "yyyy-MM*dd";
		  dailySheduleDBLayer.setDateFormat(newFormat);
		  dailySheduleDBLayer.setWhereFrom(myWhereFromDate);
	      Date whereFromDate = dailySheduleDBLayer.getWhereUtcFrom();
	  	  SimpleDateFormat formatter = new SimpleDateFormat(newFormat);
		  Date d = formatter.parse(myWhereFromDate);
	      d = UtcTimeHelper.convertTimeZonesToDate(UtcTimeHelper.localTimeZoneString(), "UTC", new DateTime(d));

	      assertEquals("testSetwhereFromDate failed: ",0,d.compareTo(whereFromDate));	
	}
	
	@Test
	public void testGetWaitingDailyScheduleList() throws ParseException {
		
// Test mit delete eines Bereiches		
		DailyScheduleDBLayer dailyScheduleDBLayer = new DailyScheduleDBLayer(configurationFile);
		dailyScheduleDBLayer.beginTransaction();
		dailyScheduleDBLayer.setDateFormat("yyyy-MM-dd hh:mm");
		dailyScheduleDBLayer.setWhereFromUtc("2011-01-01 00:00");
		dailyScheduleDBLayer.setWhereToUtc("2049-10-01 00:00");
		
		List  transferList  = dailyScheduleDBLayer.getWaitingDailyScheduleList(1);
		assertEquals("testGetWaitingDailyScheduleList", 1, transferList.size());
		
	}
	 
	@Test
	public void testGetDailyScheduleList() throws ParseException {
		
// Test mit delete eines Bereiches		
		DailyScheduleDBLayer dailyScheduleDBLayer = new DailyScheduleDBLayer(configurationFile);
		dailyScheduleDBLayer.beginTransaction();
		dailyScheduleDBLayer.setDateFormat("yyyy-MM-dd hh:mm");
		dailyScheduleDBLayer.setWhereFromUtc("2011-01-01 00:00");
		dailyScheduleDBLayer.setWhereToUtc("2049-10-01 00:00");
		
		List  transferList  = dailyScheduleDBLayer.getDailyScheduleList(1);
		assertEquals("testGetDailyScheduleList", 1, transferList.size());
		
	}
	 
	
	
	@Test
	public void testContainsSchedulerHistoryDBItem() {
		DailyScheduleDBLayer dailyScheduleDBLayer = new DailyScheduleDBLayer(configurationFile);
		SchedulerTaskHistoryDBItem schedulerHistoryDBItem = new SchedulerTaskHistoryDBItem();
		schedulerHistoryDBItem.setSpoolerId("scheduler_4139");
		schedulerHistoryDBItem.setId(Long.valueOf(4711));
		assertEquals("testContainsSchedulerHistoryDBItem", false, dailyScheduleDBLayer.contains(schedulerHistoryDBItem));
	 
	}

	@Test
	public void testCcontainsSchedulerOrderHistoryDBItem() {
		DailyScheduleDBLayer dailyScheduleDBLayer = new DailyScheduleDBLayer(configurationFile);
		SchedulerOrderHistoryDBItem schedulerOrderHistoryDBItem = new SchedulerOrderHistoryDBItem();
		schedulerOrderHistoryDBItem.setSpoolerId("scheduler_4139");
		schedulerOrderHistoryDBItem.setOrderId("4711");
		schedulerOrderHistoryDBItem.setJobChain("myJobchain");
		assertEquals("testContainsSchedulerHistoryDBItem", false, dailyScheduleDBLayer.contains(schedulerOrderHistoryDBItem));
	}
	 
	@Test
	public void testUpdateDailyScheduleDBItem() {
		DailyScheduleDBLayer dailyScheduleDBLayer = new DailyScheduleDBLayer(configurationFile);

		dailyScheduleDBLayer.beginTransaction();
		DailyScheduleDBItem dailyScheduleDBItem = getNewDailyScheduleDBItem();
		dailyScheduleDBItem.setStatus(47);
		dailyScheduleDBLayer.save(dailyScheduleDBItem);
		dailyScheduleDBLayer.commit();
		
		dailyScheduleDBLayer.beginTransaction();
		DailyScheduleDBItem dailyScheduleDBItem2 = (DailyScheduleDBItem) dailyScheduleDBLayer.getSession().load(DailyScheduleDBItem.class,dailyScheduleDBItem.getId() );
		dailyScheduleDBItem2.setScheduleExecuted(new Date());
		dailyScheduleDBLayer.update(dailyScheduleDBItem2);
		dailyScheduleDBLayer.commit();
		
		  
	}
	
	
	
	
}
